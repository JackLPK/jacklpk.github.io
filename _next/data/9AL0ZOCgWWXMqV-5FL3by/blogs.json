{"pageProps":{"blogs":[{"frontmatter":{"title":"Refreshing Firefox favicons","created_at":"2023-07-05","updated_at":"2023-07-05","slug":"purge-firefox-favicons","excerpt":"How to refresh/remove favicons in Firefox.","tags":["Webdev"]},"content":"\n<!-- 2023-07-05-purge-firefox-favicons -->\n\n# Refreshing Firefox favicons\n\n> If you are a web developer, you're gonna need this. ðŸ˜Ž\n\n\nFor now, I have only tried this on Windows.\nMaybe I'll add more info later.\n\n\n[TLDR](#tldr)\n\n\n## Where are the `favicons`?\n\nInside the `C:\\Users\\user1\\AppData\\Roaming\\Mozilla\\Firefox\\Profiles\\` folder,\nit looks like something like this\n\n```\nabcdef.default-release/\nghijkl.dev-edition-default/\nmnopqr.default/\n```\n\nAnd inside these folders, you'll find:\n```\n./abcdef.default-release/favicons.sqlite\n./abcdef.default-release/favicons.sqlite-shm\n./abcdef.default-release/favicons.sqlite-wal\n./ghijkl.dev-edition-default/favicons.sqlite\n./ghijkl.dev-edition-default/favicons.sqlite-shm\n./ghijkl.dev-edition-default/favicons.sqlite-wal\n```\n\nIn tree view:\n```\n.\n+---abcdef.default-release\n|   favicons.sqlite\n|   favicons.sqlite-shm\n|   favicons.sqlite-wal\n|\n\\---ghijkl.dev-edition-default\n    favicons.sqlite\n    favicons.sqlite-shm\n    favicons.sqlite-wal\n\n```\n\nRunning the `file` command (from git-bash) on these files show:\n```sh\ncd ghijkl.dev-edition-default/\nfile favicons.sqlite*\n```\n\n~~(At least on my machine)~~ LOL\n```\nfavicons.sqlite:     SQLite 3.x database, last written using SQLite version 3041002, page size 32768, writer version 2, read version 2, file counter 4, database pages 8, cookie 0x6, schema 4, largest root page 8, UTF-8, vacuum mode 1, version-valid-for 4\n\nfavicons.sqlite-shm: data\n\nfavicons.sqlite-wal: empty\n```\n\nIf you open the `favicons.sqlite` with something like [SQLiteStudio](https://sqlitestudio.pl/), you see:\n\n![Opening favicons.sqlite with SQLiteStudio](/images/blogs/purge-firefox-favicons_01.png)\n\nSo, basically:\n\n- `favicons.sqlite` is a sqlite database\n- `favicons.sqlite-shm` is a shared-memory File (see [SQLite docs](https://www.sqlite.org/tempfiles.html#shared_memory_files))\n- `favicons.sqlite-wal` is a write-ahead log (WAL) file (see [SQLite docs](https://www.sqlite.org/tempfiles.html#write_ahead_log_wal_files))\n\n\n<a id=\"tldr\"></a>\nNow, all you need to do is delete those 3 files. And Firefox will rebuild them for you.\n\n- `favicons.sqlite`\n- `favicons.sqlite-shm`\n- `favicons.sqlite-wal`\n\n\n## Related resources\n- [Stack Overflow - Refresh favicon in bookmarks (Firefox)](https://stackoverflow.com/questions/37859753/refresh-favicon-in-bookmarks-firefox)\n- [Fix: Firefox Displaying the Wrong Bookmark Favicons](https://appuals.com/fix-firefox-displaying-the-wrong-bookmark-favicons/)\n"},{"frontmatter":{"title":"R: Create Empty Plots","created_at":"2023-02-15","updated_at":"2023-02-15","slug":"create-empty-rplot","excerpt":"How to create empty plots in R...","tags":["R","plot"]},"content":"\n## Do you know you can create empty plots in R?\n\nSometimes, you just want to create an empty plot in R...\n\nJust want to remove everything? [â†“â†“ TLDR â†“â†“](#tldr).\n\n## The good old _plot_ command\n\nFirst, let get ourselves some data.\n\n```{r}\nset.seed(42)\ny1 <- rnorm(10)\nx1 <- seq_along(y1)\n```\n\n### A Typical Plot\n\nPlotting it in a normal way:\n\n```{r}\nplot(x1, y1)\n```\n\n![A typical plot](/images/blogs/create-empty-rplot_normal-plot.png)\n\n### Remove the labels (and titles)\n\nThe obvious way\n\n```{r}\nplot(\n  x1, y1,\n  xlab = \"\", ylab = \"\",\n  main = \"\"\n)\n```\n\nAn alternative way\n\n```{r}\nplot(\n  x1, y1,\n  xlab = \"Oh no I'm gone\", ylab = \"Oh no I'm gone\",\n  ann = FALSE # <- added this\n)\n```\n\n![A plot with labels removed](/images/blogs/create-empty-rplot_remove-labels.png)\n\n### Remove some ticks\n\n```{r}\nplot(\n  x1, y1,\n  xaxt = \"n\", # suppress x-ticks\n  yaxt = \"n\" # suppress y-ticks\n)\n```\n\n![A plot with ticks removed](/images/blogs/create-empty-rplot_remove-ticks.png)\n\n### Remove the points\n\n```{r}\nplot(x1, y1, col = rgb(0, 0, 0, 0))  # Set alpha to 0\n```\n\n![A plot with invisible points](/images/blogs/create-empty-rplot_remove-points.png)\n\n### Remove surrounding box\n\n```{r}\nplot(x1, y1, fg = rgb(0, 0, 0, 0))  # Set alpha to 0\n```\n\n![A plot with invisible box](/images/blogs/create-empty-rplot_remove-box.png)\n\n### Remove everything!? (Part 1)\n\n```{r}\nplot(\n  x1, y1,\n  xaxt = \"n\", yaxt = \"n\",  # ticks\n  ann = FALSE,             # labels + titles\n  fg = rgb(0, 0, 0, 0),    # surrounding box\n  col = rgb(0, 0, 0, 0)    # data points\n)\n```\n\n![A plot with everything removed](/images/blogs/create-empty-rplot_remove-everything.png)\n\nYou are loking at an empty **white** image.\n\n<a name=\"tldr\"></a>\n\n### Remove everything!? (Part 2)\n\nBut wait, there's more. The image is still **white**. Lets plot a transparent one ðŸ˜Ž.\n\n```{r}\npng(\n  filename = \"empty-Rplot.png\",\n  bg = rgb(0, 0, 0, 0)\n)\nplot(\n  x1, y1,\n  xaxt = \"n\", yaxt = \"n\",  # ticks\n  ann = FALSE,             # labels + titles\n  fg = rgb(0, 0, 0, 0),    # surrounding box\n  col = rgb(0, 0, 0, 0)    # data points\n)\ndev.off()\n```\n\n**transparent** image below â†“\n\n![A plot with everything removed and a transparent background](/images/blogs/create-empty-rplot_empty-Rplot.png)\n\nYou are loking at an empty **transparent** image â†‘.\n\n> Note: Not all image formats support transparent background, e.g. .jpg files\n"},{"frontmatter":{"title":"Easy PySide6 Setup","created_at":"2022-12-30","updated_at":"2022-12-30","slug":"easy-pyside6-setup","excerpt":"How to quickly setup PySide6 app development.","tags":["Python","Qt","PySide6"]},"content":"\r\n## Desktop applications and me\r\n\r\nIt has been a long time since I played with a desktop app framework.\r\nA few years ago I have played with [wxPython](https://wxpython.org/) and [PySide2](https://doc.qt.io/qtforpython-5/).\r\n\r\n![Author's Drawing of PySideX's logo](/images/blogs/hand-drawn-pyside-logo.png)\r\n\r\n## The setup\r\n\r\nAfter you installed Python...\r\n\r\n**Always**, always use a virtual environment if you need to install any packages. There are quite a number of choices for virtual environments, e.g. [venv](https://docs.python.org/3/library/venv.html) (Python standard library), [virtualenv](https://virtualenv.pypa.io/en/latest/), [Pyenv](https://pipenv.pypa.io/en/latest/), [Poetry](https://python-poetry.org/), .etc.\r\n[miniconda/Anaconda](https://docs.conda.io/en/latest/miniconda.html) could also be in consideration if you want fine control of the Python version.\r\nI use Poetry most of the time. For this article, I'll use the default options for poetry.\r\n\r\nDon't let the message below scare you, it just need a simple fix.\r\n\r\n```sh\r\n> mkdir pyside6-sandbox && cd pyside6-sandbox\r\n>\r\n> poetry init -n\r\n> ls\r\npyproject.toml\r\n> poetry add pyside6\r\n\r\nThe current project\\'s Python requirement (>=3.10,<4.0) is not compatible with some of the required packages Python requirement:\r\n  - pyside6 requires Python <3.12,>=3.7, so it will not be satisfied for Python >=3.12,<4.0\r\n\r\nBecause no versions of pyside6 match >6.4.1,<7.0.0\r\n and pyside6 (6.4.1) requires Python <3.12,>=3.7, pyside6 is forbidden.\r\nSo, because pyside6-sandbox depends on PySide6 (^6.4.1), version solving failed.\r\n\r\n  â€¢ Check your dependencies Python requirement: The Python requirement can be specified via the `python` or `markers` properties\r\n\r\n    For pyside6, a possible solution would be to set the `python` property to \">=3.10,<3.12\"\r\n\r\n    https://python-poetry.org/docs/dependency-specification/#python-restricted-dependencies,\r\n    https://python-poetry.org/docs/dependency-specification/#using-environment-markers\r\n```\r\n\r\nTo install PySide6, we specify the python version.\r\n\r\n```sh\r\n> poetry add --python '>=3.10,<3.12' pyside6\r\nUsing version ^6.4.1 for PySide6\r\n\r\nUpdating dependencies\r\nResolving dependencies... (0.4s)\r\n\r\nWriting lock file\r\n\r\nPackage operations: 4 installs, 0 updates, 0 removals\r\n\r\n  â€¢ Installing shiboken6 (6.4.1)\r\n  â€¢ Installing pyside6-essentials (6.4.1)\r\n  â€¢ Installing pyside6-addons (6.4.1)\r\n  â€¢ Installing pyside6 (6.4.1)\r\n\r\n> poetry shell\r\nSpawning shell within some-where/virtualenvs/pyside6-sandbox-UCbHYWjN-py3.10\r\n> (pyside6-sandbox-py3.10)\r\n```\r\n\r\nDONE!\r\n\r\n## But wait! There's more!\r\n\r\nThe `pyside6` package included a bunch of tools.\r\nJust make sure we are in our virtual environment.\r\n\r\n- pyside6-assistant\r\n- pyside6-deploy\r\n- pyside6-designer\r\n- pyside6-genpyi\r\n- pyside6-linguist\r\n- pyside6-lrelease\r\n- pyside6-lupdate\r\n- pyside6-metaobjectdump\r\n- pyside6-project\r\n- pyside6-qml\r\n- pyside6-qmlformat\r\n- pyside6-qmlimportscanner\r\n- pyside6-qmllint\r\n- pyside6-qmlls\r\n- pyside6-qmltyperegistrar\r\n- pyside6-qtpy2cpp\r\n- pyside6-rcc\r\n- pyside6-uic\r\n\r\nIf you are on Powershell, use this command to see what you get:\r\n\r\n```powershell\r\n> (pyside6-sandbox-py3.10)gcm -Name 'pyside6-*'\r\n```\r\n\r\nTo use QtDesigner:\r\n\r\n```sh\r\n> (pyside6-sandbox-py3.10) pyside6-qtdesigner &  # launch in background with '&'\r\n```\r\n\r\nIf you are new to the Qt ecosystem, make sure to checkout:\r\n\r\n- pyside6-designer\r\n- pyside6-rcc\r\n- pyside6-uic\r\n\r\n## Conclusion\r\n\r\nI know webapps are gaining a lot of traction for a long while, but writing desktop application is always a fun thing to do for me.\r\n\r\nWhat actually reinspark me to give Qt a look again is this tutorial by [freeCodeCamp.org](https://www.youtube.com/@freecodecamp).\r\n\r\n<iframe\r\n  width=\"640\"\r\n  height=\"360\"\r\n  src=\"https://www.youtube.com/embed/Z1N9JzNax2k\"\r\n  title=\"Learn Python GUI Development for Desktop â€“ PySide6 and Qt Tutorial\"\r\n  frameborder=\"0\"\r\n  allow=\"accelerometer; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\"\r\n  loading=\"lazy\"\r\n  fetchpriority=\"low\"\r\n  allowfullscreen\r\n></iframe>\r\n\r\n[video link](https://www.youtube.com/watch?v=Z1N9JzNax2k)\r\n\r\nAlthough Qt's documentation is a little bit lacking in the Python side, Qt is a powerful and mature ecosystem for building desktop applications. Definitely worth give it a try!\r\n"},{"frontmatter":{"title":"I made a blog!","created_at":"2022-12-29","updated_at":"2022-12-29","slug":"i-made-a-blog","excerpt":"Welp, this is the first time a made a blog...","tags":["ReactJS","NextJS"]},"content":"\r\n## A very clunky blog...\r\n\r\nWelcome to my blog!\r\n\r\nCurrent situation:\r\n\r\n![A Blank Image](/images/blogs/blank.png)\r\n\r\nWelp, this is the first time a made a blog...\r\n\r\nOkay, jokes aside. I will be posting personal thoughts and experiences about tech and code.\r\n\r\nDuring the makings of this blog, I found these resources very helpful:\r\n\r\n- [Next.js in 100 Seconds // Plus Full Beginner's Tutorial](https://www.youtube.com/watch?v=Sklc_fQBmcs) by [_Fireship_](https://www.youtube.com/@Fireship)\r\n- [Static Blog With Next.js and Markdown](https://www.youtube.com/watch?v=MrjeefD8sac) by [_Traversy Media_](https://www.youtube.com/@TraversyMedia)\r\n\r\nNextJS with Markdown is an fun way to go but it definitely took me some time.\r\n\r\nObviously, there are a lot of ways to build a blog. If time is of essense, something like blogger or obsidian publish would be better.\r\n\r\nAnd most paid services would also provide better search engine optimisations.\r\n\r\n> I have no idea how you found this blog.\r\n>\r\n"}]},"__N_SSG":true}